# {{ ansible_managed }}

## Options
options {
  directory "/var/cache/bind";

  dnssec-enable yes;
  dnssec-validation yes;

  auth-nxdomain no;    # conform to RFC1035
  listen-on { {% if bind_listen_ipv4 %}any{% else %}none{% endif %}; };
  listen-on-v6 { {% if bind_listen_ipv6 %}any{% else %}none{% endif %}; };

{% for option,  value in bind_options.items() %}
  {{ option }} {% if value == True %}yes{% elif value == False %}no{% else %}{{ value }}{% endif %};
{% endfor %}

  version none;
};

## Logging
logging {
  channel query_log {
    file "/var/log/named/query.log";
    severity debug 10;
    print-time yes;
  };
  channel error_log {
    file "/var/log/named/error.log" versions 3 size 30m;
    severity dynamic;
    print-time yes;
  };
  category queries {
    query_log;
  };
  category security {
    error_log;
  };
};

{% if bind_tsig is defined %}
## TSIG keys
{% for usage, value in bind_tsig.items() %}
### {{ usage }}
{% for key in value %}
key "{{ key.name }}" {
  algorithm {{ key.algorithm }};
  secret "{{ key.secret }}";
};
{% endfor %}
{% endfor %}
{% endif %}

{% if bind_acl is defined %}
# ACL
{% for acl, hosts in bind_acl.items() %}
acl {{ acl }} {
{% for host in hosts %}
 {{ host }};
{% endfor %}
};
{% endfor %}
{% endif %}
##VIEW
{% for view, value in bind_views.items() %}
{% if 'state' not in value or value.state|lower not in ['disabled', 'absent'] %}

view {{ view }} {
  match-clients { {% if value.acl is defined %}{{ value.acl }}{% else %}{{ view }}{% endif %}; };
  allow-recursion { {{ value.recursion }}; };
  allow-query { {% if value.acl is defined %}{{ value.acl }}{% else %}{{ view }}{% endif %}; };
{% for zon in value.zones %}
{% for zone, param in zon.items() %}

  zone "{{ zone }}" {
    type master;
    file "/etc/bind/zones/{{ view }}/{{ zone }}/db";
{% if zone in bind_dnssec %}
    key-directory "/etc/bind/keys";
{% endif %}
    allow-transfer {
{% if bind_tsig.transfer is defined %}
{% set tsig_tr_list = (bind_tsig.transfer | selectattr("zone", "==", zone) | list + bind_tsig.transfer | selectattr("zone", "==", "wild") | list) %}
{% else %}
{% set tsig_tr_list = [] %}
{% endif %}
{% if (tsig_tr_list | length) %}
{% for key in tsig_tr_list %}
      key {{ key.name }};
{% endfor %}
{% else %}
      "none";
{% endif %}
    };
{% if bind_tsig.edition is defined %}
{% set tsig_ed_list = (bind_tsig.edition | selectattr("zone", "==", zone) | list + bind_tsig.edition | selectattr("zone", "==", "wild") | list) %}
{% else %}
{% set tsig_ed_list = [] %}
{% endif %}
{% if (tsig_ed_list | length) %}
    update-policy {
{% for key in tsig_ed_list %}
{% if key.policy is defined %}
{% if key.policy|lower == "certbot" %}
      grant {{ key.name }} name _acme-challenge.{{ zone }}. txt;
{% endif %}
{% if key.policy|lower == "custom" %}
      grant {{ key.name }} {{ key.policy_custom }};
{% endif %}
{% endif %}
{% endfor %}
    };
{% endif %}
{% if 'options' in param %}
{% for option,  opt_value in param.options.items() %}
    {{ option }} {% if opt_value == True %}yes{% elif opt_value == False %}no{% else %}{{ opt_value }}{% endif %};
{% endfor %}
{% endif %}
  };
{% if param.reverse is defined and param.reverse and param.ipv4 is defined %}

  zone "{{ param.ipv4.split('.')[0:3] | reverse | join('.') }}.in-addr.arpa" {
    type master;
    file "/etc/bind/zones/{{ view }}/{{ zone }}/rev";
  };
{% endif %}
{% endfor %}
{% endfor %}
};
{% endif %}
{% endfor %}
